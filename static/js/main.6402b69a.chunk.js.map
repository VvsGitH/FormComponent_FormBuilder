{"version":3,"sources":["form-custom/form/form.types.js","form-custom/input/input.utils.js","form-custom/custom-input-fields/input-file.component.jsx","form-custom/custom-input-fields/input-checkboxes.component.jsx","form-custom/custom-input-fields/input-radios.component.jsx","form-custom/input/input.component.jsx","components/add-button/add-button.component.jsx","components/remove-button/remove-button.component.jsx","form-builder/fb-custom-fields/fb-options.component.jsx","form-builder/fb-custom-fields/html-attributes.js","form-builder/fb-custom-fields/fb-additional-html.component.jsx","form-builder/field-builder/field-builder.component.jsx","components/form-button/form-button.component.jsx","form-builder/form-builder/form-builder.component.jsx","form-custom/form/form.utils.js","form-custom/form/form.component.jsx","example/form.data.js","example/App.js","index.js"],"names":["supportedTypes","btnTypes","unMaskValue","masked","mask","unmasked","i","length","concat","InputFile","innerRef","onChange","required","htmlProps","useState","filesInfo","setFilesInfo","isValid","setIsValid","className","type","onClick","current","click","htmlFor","id","ref","tabIndex","event","files","target","newFileLabel","sizeWithUnit","calculateSizeUnit","size","name","areFilesValid","validateFiles","fileInput","fieldRef","accept","validExtensions","split","includes","setCustomValidity","bytes","UNITS","value","valueString","Number","parseFloat","toFixed","InputCheckboxes","fieldValue","options","handleChange","indx","currentValues","map","option","Fragment","label","checked","InputRadios","charAt","toUpperCase","slice","Input","renderField","Array","fill","props","equalTo","errMsg","undefined","handleMaskedField","this","info","fieldProps","maskIndx","valueIndx","maskValue","React","PureComponent","AddButton","additionalHtml","RemoveButton","title","FBOptions","optionsArray","isCheckboxes","useEffect","addOption","currentOptions","push","updateOption","isRequired","console","error","e","placeholder","disabled","splice","removeOption","memo","supportedHtmlAttributes","FBAdditionalHtml","additionalAttribs","updateAttribName","newArray","updateAttribValue","attrib","htmlAttrib","removeAttrib","TYPES_WITH_OPTIONS","TEXT_TYPES","FieldBuilder","fieldData","usedNames","newFieldData","Math","floor","random","pattern","readOnly","FormButton","defaultProps","FormBuilder","addField","setState","fieldsData","state","removeField","newFieldsData","handleTitleChange","handleSubmit","preventDefault","fieldsDataCopy","JSON","parse","stringify","spreadAdditionalAttribs","onSubmit","attribsArr","j","recomputeUsedNames","newUsedNames","filter","field","createInitialState","reduce","stringifyAndHash","obj","str","hash","charCodeAt","Form","filesCopy","handleReset","key","fields","fieldsRefs","changeEvent","Event","bubbles","dispatchEvent","filledFields","isArray","reset","formData","btns","unsupported","fieldsInx","btnsIndx","unsupIndx","calculateFieldsArrays","createRef","warn","onReset","btn","FORM_DATA","min","max","maxLength","rows","log","FORM_KEY","App","default","builder","custom","tabsState","setTabs","toggleTab","tabName","newTabsState","customForm","setCustomForm","handleFBSubmit","useCallback","handleFormSubmit","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6402b69a.chunk.js","sourcesContent":["export const supportedTypes = [\r\n\t'checkbox',\r\n\t'date',\r\n\t'email',\r\n\t'file',\r\n\t'number',\r\n\t'password',\r\n\t'range',\r\n\t'select',\r\n\t'tel',\r\n\t'text',\r\n\t'textarea',\r\n\t'url',\r\n\r\n\t// Custom types\r\n\t'radios',\r\n\t'checkboxes',\r\n];\r\n\r\nexport const btnTypes = ['submit', 'reset', 'button'];\r\n","export const maskValue = (value, mask) => {\r\n\tif (!mask || !value) return value;\r\n\r\n\tlet maskIndx = 0;\r\n\tlet valueIndx = 0;\r\n\tlet masked = '';\r\n\r\n\twhile (valueIndx < value.length && maskIndx < mask.length) {\r\n\t\tif (mask[maskIndx] === '#') {\r\n\t\t\tmasked = masked.concat(value[valueIndx]);\r\n\t\t\tvalueIndx++;\r\n\t\t} else {\r\n\t\t\tmasked = masked.concat(mask[maskIndx]);\r\n\t\t}\r\n\t\tmaskIndx++;\r\n\t}\r\n\r\n\treturn masked;\r\n};\r\n\r\nexport const unMaskValue = (masked, mask) => {\r\n\tif (!mask || !masked) return masked;\r\n\r\n\tlet unmasked = '';\r\n\r\n\tfor (let i = 0; i < masked.length; i++) {\r\n\t\tif (masked[i] !== mask[i]) {\r\n\t\t\tunmasked = unmasked.concat(masked[i]);\r\n\t\t}\r\n\t}\r\n\r\n\treturn unmasked;\r\n};\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './input-file.style.scss';\r\n\r\nconst InputFile = ({ innerRef, onChange, required, ...htmlProps }) => {\r\n\tconst [filesInfo, setFilesInfo] = useState('Choose a file');\r\n\tconst [isValid, setIsValid] = useState(true);\r\n\r\n\t// Genera una stringa con nome e dimensione dei file selezionati\r\n\t// Verifica che il formato dei file sia valido\r\n\t// Passa i file al componente padre\r\n\r\n\tconst handleChange = event => {\r\n\t\tconst files = event.target.files;\r\n\r\n\t\t// Calcolo la stringa da mostrare nella custom label\r\n\t\tlet newFileLabel = '';\r\n\t\tfor (let i = 0; i < files.length; i++) {\r\n\t\t\t// Determino il modo migliore in cui mostrare la dimensione\r\n\t\t\tconst sizeWithUnit = calculateSizeUnit(files[i].size);\r\n\r\n\t\t\t// Aggiungo nome e dimensione del file alla stringa\r\n\t\t\tnewFileLabel = newFileLabel.concat(`${files[i].name} [${sizeWithUnit}]`);\r\n\r\n\t\t\t// Se il file non è l'ultimo, aggiungo un \\n\r\n\t\t\tnewFileLabel =\r\n\t\t\t\ti !== files.length - 1 ? newFileLabel.concat('\\n') : newFileLabel;\r\n\t\t}\r\n\t\tsetFilesInfo(newFileLabel ? newFileLabel : 'Choose a file');\r\n\r\n\t\t// Verifico se i file inseriti sono nel formato corretto\r\n\t\tconst areFilesValid = validateFiles(event.target, innerRef.current);\r\n\r\n\t\tif (!areFilesValid) {\r\n\t\t\t// Se il campo è invalido, fornisco un evento vuoto alla\r\n\t\t\t//  funzione onChange del padre\r\n\t\t\tconst fakeEvent = { target: { type: 'file', files: [] } };\r\n\t\t\tonChange(fakeEvent);\r\n\t\t} else {\r\n\t\t\t// Se invece il campo è valido, passo tutto l'evento al padre\r\n\t\t\t//  in modo che possa gestire il da farsi\r\n\t\t\tonChange(event);\r\n\t\t}\r\n\r\n\t\tsetIsValid(areFilesValid);\r\n\t};\r\n\r\n\t// Renderizzo un campo input customizzato.\r\n\t// Nascondo il campo input di default in css, lasciando visibile solo\r\n\t//  il div successivo che contiene un label e un pulsante. Imposto anche\r\n\t//  il tabindex a -1 in modo che non venga focalizzato durante la\r\n\t//  navigazione con tastiera.\r\n\t// Il label mostra i file selezionati dall'utente.\r\n\t// Cliccare sia sul pulsante che sul label equivale a cliccare sul campo\r\n\t//  input.\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<div className='custom-file-field'>\r\n\t\t\t\t<button\r\n\t\t\t\t\tclassName='custom-file-btn'\r\n\t\t\t\t\ttype='button'\r\n\t\t\t\t\tonClick={() => innerRef.current.click()}>\r\n\t\t\t\t\tBrowse\r\n\t\t\t\t</button>\r\n\t\t\t\t<label\r\n\t\t\t\t\tclassName={`custom-file-label${!isValid ? ' file-invalid' : ''}`}\r\n\t\t\t\t\thtmlFor={htmlProps.id}>\r\n\t\t\t\t\t{filesInfo}\r\n\t\t\t\t</label>\r\n\t\t\t</div>\r\n\t\t\t<input\r\n\t\t\t\tclassName='hidden-file-field'\r\n\t\t\t\tref={innerRef}\r\n\t\t\t\ttabIndex='-1'\r\n\t\t\t\tonChange={handleChange}\r\n\t\t\t\trequired={required}\r\n\t\t\t\t{...htmlProps}\r\n\t\t\t/>\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nInputFile.propTypes = {\r\n\ttype: PropTypes.string.isRequired,\r\n\tid: PropTypes.string.isRequired,\r\n\tname: PropTypes.string.isRequired,\r\n\r\n\tonChange: PropTypes.func.isRequired,\r\n\r\n\tinnerRef: PropTypes.shape({ current: PropTypes.any }).isRequired,\r\n};\r\n\r\nexport default InputFile;\r\n\r\n// UTILS\r\n// Verifica che il tipo di file inserito sia incluso tra quelli specificati\r\n//  nel campo html accept.\r\n// Se l'estensione del file non è corretta, setta il campo input come\r\n//  invalido, con un messaggio di invalidità custom\r\n\r\nconst validateFiles = (fileInput, fieldRef) => {\r\n\tconst { accept, files } = fileInput;\r\n\r\n\t// Validazione dei campi di tipo file\r\n\t// Solo se l'elemento html specifica l'attributo accept\r\n\tif (accept) {\r\n\t\t// Estraggo l'array delle estensioni valide dall'attributo\r\n\t\t//  accept dell'elemento html\r\n\t\tconst validExtensions = accept.split(', ');\r\n\r\n\t\tfor (let i = 0; i < files.length; i++) {\r\n\t\t\t// Verifico che l'estensione del file sia nell'array\r\n\t\t\tif (!validExtensions.includes(files[i].type)) {\r\n\t\t\t\tfieldRef.setCustomValidity('File format not supported');\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfieldRef.setCustomValidity('');\r\n\treturn true;\r\n};\r\n\r\n// UTILS\r\n// Converte un numero di bytes in una stringa del tipo 128.20 Kb\r\n\r\nconst calculateSizeUnit = bytes => {\r\n\tconst UNITS = ['b', 'Kb', 'Mb', 'Gb', 'Tb'];\r\n\r\n\t// Determina quale sia l'unità di misura più opportuna\r\n\tlet value = bytes;\r\n\tlet i = 0;\r\n\twhile (value > 1024 && i < UNITS.length) {\r\n\t\tvalue = value / 1024;\r\n\t\ti++;\r\n\t}\r\n\r\n\t// Converte il float in una stringa con due cifre dopo la virgola\r\n\tlet valueString = Number.parseFloat(value).toFixed(2);\r\n\r\n\t// Aggiunge l'unità di misura\r\n\tvalueString = valueString + ' ' + UNITS[i];\r\n\r\n\treturn valueString;\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './input-checkboxes.style.scss';\r\n\r\n// Il tipo checkbox è un campo booleano controllato dall'attributo\r\n// checked e non da value.\r\n// Richiede anche un secondo label affiancato.\r\n\r\nconst InputCheckboxes = ({ fieldValue, onChange, options, name, id }) => {\r\n\tconst handleChange = indx => {\r\n\t\tconst currentValues = [...fieldValue];\r\n\t\tcurrentValues[indx] = !currentValues[indx];\r\n\r\n\t\tconst customEvent = { target: { name, value: currentValues } };\r\n\t\tonChange(customEvent);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div id={id} name={name} className='checkbox-container'>\r\n\t\t\t{options.map((option, indx) => (\r\n\t\t\t\t<React.Fragment key={name + indx}>\r\n\t\t\t\t\t<label htmlFor={name + indx}>{option.label}</label>\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\ttype='checkbox'\r\n\t\t\t\t\t\tname={name}\r\n\t\t\t\t\t\tid={name + indx}\r\n\t\t\t\t\t\tchecked={fieldValue[indx]}\r\n\t\t\t\t\t\tonChange={() => handleChange(indx)}\r\n\t\t\t\t\t\trequired={option.required}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</React.Fragment>\r\n\t\t\t))}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nInputCheckboxes.propTypes = {\r\n\ttype: PropTypes.string.isRequired,\r\n\tid: PropTypes.string.isRequired,\r\n\tname: PropTypes.string.isRequired,\r\n\r\n\tfieldValue: PropTypes.arrayOf(PropTypes.bool).isRequired,\r\n\tonChange: PropTypes.func.isRequired,\r\n\r\n\toptions: PropTypes.PropTypes.arrayOf(\r\n\t\tPropTypes.shape({\r\n\t\t\tlabel: PropTypes.string,\r\n\t\t\trequired: PropTypes.bool,\r\n\t\t})\r\n\t).isRequired,\r\n};\r\n\r\nexport default InputCheckboxes;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './input-radios.style.scss';\r\n\r\n// Il tipo radio è usato per selezionare una tra varie opzioni.\r\n// Tali opzioni devono essere contenute nel campo options dei props\r\n//  e generano un pulsante radio ciascuna. Il campo value di un\r\n//  radio contiene il nome dell'opzione che rappresenta.\r\n// A ciascun pulsante è dunque affiancato un label che contiene\r\n//  il nome dell'opzione di quel pulsante, con la lettera maiuscola.\r\n// I pulsanti e i loro label sono raggruppati all'interno di un div.\r\n\r\nconst InputRadios = ({\r\n\tfieldValue,\r\n\tonChange,\r\n\toptions,\r\n\tid,\r\n\tname,\r\n\ttype,\r\n\trequired,\r\n\t...htmlProps\r\n}) => (\r\n\t<div id={id} className='radio-container'>\r\n\t\t{options.map(option => (\r\n\t\t\t<React.Fragment key={`${name}-${option}`}>\r\n\t\t\t\t<label htmlFor={`${name}-${option}`}>\r\n\t\t\t\t\t{option.charAt(0).toUpperCase() + option.slice(1) + ':'}\r\n\t\t\t\t</label>\r\n\t\t\t\t<input\r\n\t\t\t\t\ttype='radio'\r\n\t\t\t\t\tname={name}\r\n\t\t\t\t\tid={`${name}-${option}`}\r\n\t\t\t\t\tvalue={option}\r\n\t\t\t\t\tchecked={fieldValue === option}\r\n\t\t\t\t\tonChange={onChange}\r\n\t\t\t\t\trequired={required}\r\n\t\t\t\t\t{...htmlProps}\r\n\t\t\t\t/>\r\n\t\t\t</React.Fragment>\r\n\t\t))}\r\n\t</div>\r\n);\r\n\r\nInputRadios.propTypes = {\r\n\ttype: PropTypes.string.isRequired,\r\n\tid: PropTypes.string.isRequired,\r\n\tname: PropTypes.string.isRequired,\r\n\r\n\tfieldValue: PropTypes.string.isRequired,\r\n\tonChange: PropTypes.func.isRequired,\r\n\r\n\toptions: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n};\r\n\r\nexport default InputRadios;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { maskValue, unMaskValue } from './input.utils';\r\nimport {\r\n\tInputFile,\r\n\tInputRadios,\r\n\tInputCheckboxes,\r\n} from '../custom-input-fields';\r\n\r\nimport './input.style.scss';\r\n\r\nclass Input extends React.PureComponent {\r\n\t//\r\n\t// Renderizzo il campo di input in base al tipo contenuto nei props\r\n\t//\r\n\r\n\trenderField = (\r\n\t\tfieldValue,\r\n\t\tonChange,\r\n\t\t{ options, innerRef, required, ...htmlProps }\r\n\t) => {\r\n\t\tswitch (htmlProps.type) {\r\n\t\t\t// Genera una sequenza di pulsanti checkbox con un label in comune\r\n\t\t\tcase 'checkboxes':\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<InputCheckboxes\r\n\t\t\t\t\t\tfieldValue={\r\n\t\t\t\t\t\t\tfieldValue ? fieldValue : Array(options.length).fill(false)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tonChange={onChange}\r\n\t\t\t\t\t\toptions={options}\r\n\t\t\t\t\t\t{...htmlProps}\r\n\t\t\t\t\t/>\r\n\t\t\t\t);\r\n\r\n\t\t\t// Genera un singolo checkbox. I checkbox sono controllati dall'\r\n\t\t\t//  attributo checked e non value!\r\n\t\t\tcase 'checkbox':\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\tchecked={fieldValue ? fieldValue : false}\r\n\t\t\t\t\t\tref={innerRef}\r\n\t\t\t\t\t\tonChange={onChange}\r\n\t\t\t\t\t\trequired={required}\r\n\t\t\t\t\t\t{...htmlProps}\r\n\t\t\t\t\t/>\r\n\t\t\t\t);\r\n\r\n\t\t\t// Genera un numero diverso di pulsanti radio in base al contenuto\r\n\t\t\t//  di options. Tutti i pulsanti sono raggruppati in un div e hanno\r\n\t\t\t//  un proprio label.\r\n\t\t\tcase 'radios':\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<InputRadios\r\n\t\t\t\t\t\tfieldValue={fieldValue ? fieldValue : ''}\r\n\t\t\t\t\t\tonChange={onChange}\r\n\t\t\t\t\t\toptions={options}\r\n\t\t\t\t\t\t{...htmlProps}\r\n\t\t\t\t\t/>\r\n\t\t\t\t);\r\n\r\n\t\t\t// Il tag select deve essere costruito con all'interno i suoi\r\n\t\t\t//  vari tag <option>\r\n\t\t\tcase 'select':\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<select\r\n\t\t\t\t\t\tvalue={fieldValue ? fieldValue : ''}\r\n\t\t\t\t\t\tref={innerRef}\r\n\t\t\t\t\t\tonChange={onChange}\r\n\t\t\t\t\t\trequired={required}\r\n\t\t\t\t\t\t{...htmlProps}>\r\n\t\t\t\t\t\t<option value=''>Choose One</option>\r\n\t\t\t\t\t\t{options.map((option, indx) => (\r\n\t\t\t\t\t\t\t<option key={indx} value={option}>\r\n\t\t\t\t\t\t\t\t{option}\r\n\t\t\t\t\t\t\t</option>\r\n\t\t\t\t\t\t))}\r\n\t\t\t\t\t</select>\r\n\t\t\t\t);\r\n\r\n\t\t\t// Il tipo textarea richiede un trattamento speciale in quanto non\r\n\t\t\t//  è un tag <input> ma un tag <textarea>\r\n\t\t\tcase 'textarea':\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<textarea\r\n\t\t\t\t\t\tvalue={fieldValue ? fieldValue : ''}\r\n\t\t\t\t\t\tref={innerRef}\r\n\t\t\t\t\t\tonChange={onChange}\r\n\t\t\t\t\t\trequired={required}\r\n\t\t\t\t\t\t{...htmlProps}\r\n\t\t\t\t\t/>\r\n\t\t\t\t);\r\n\r\n\t\t\t// Il tipo file è un componente incontrollato\r\n\t\t\t// Lo stile del campo è customizzato\r\n\t\t\tcase 'file':\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<InputFile onChange={onChange} innerRef={innerRef} {...htmlProps} />\r\n\t\t\t\t);\r\n\r\n\t\t\t// Tipi: text, email, password, data, tel, url, range\r\n\t\t\tdefault:\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\tvalue={fieldValue ? fieldValue : ''}\r\n\t\t\t\t\t\tref={innerRef}\r\n\t\t\t\t\t\tonChange={onChange}\r\n\t\t\t\t\t\trequired={required}\r\n\t\t\t\t\t\t{...htmlProps}\r\n\t\t\t\t\t/>\r\n\t\t\t\t);\r\n\t\t}\r\n\t};\r\n\r\n\t//\r\n\t// Eseguo tutte le validazioni custom che sono indipendenti dal tipo del\r\n\t//  componente input. Le validazioni specifiche per tipo sono\r\n\t//  effettuate all'interno dei rispettivi field components.\r\n\t// Al momento l'unica validazione di questo tipo supportata è equalTo.\r\n\t//\r\n\r\n\thandleChange = event => {\r\n\t\t// Custom validation\r\n\t\tconst { equalTo, errMsg, onChange } = this.props;\r\n\r\n\t\t// Validazione dei campi con il prop equalTo\r\n\t\t// Il componente padre deve passare all'interno del prop il valore\r\n\t\t//  attuale del campo con cui si sta effettuando il confronto.\r\n\t\tif (equalTo !== null && equalTo !== undefined) {\r\n\t\t\tif (event.target.value !== equalTo)\r\n\t\t\t\tevent.target.setCustomValidity(errMsg);\r\n\t\t\telse event.target.setCustomValidity('');\r\n\t\t}\r\n\r\n\t\tonChange && onChange(event);\r\n\t};\r\n\r\n\t//\r\n\t// Rimuovo la maschera prima di passare il contenuto del campo al\r\n\t//  componente padre.\r\n\t//\r\n\r\n\thandleMaskedField = event => {\r\n\t\tconst value = event.target.value;\r\n\r\n\t\t// Pulisco il contenuto del campo, eliminando la maschera\r\n\t\tconst unmasked = unMaskValue(value, this.props.mask);\r\n\r\n\t\t// Muto l'oggetto event, inserendo il valore senza maschera nel\r\n\t\t//  campo value. In questo modo il componente padre, aggiungerà nello\r\n\t\t//  stato l'input raw dell'utente.\r\n\t\tevent.target.value = unmasked;\r\n\t\tthis.handleChange(event);\r\n\t};\r\n\r\n\t//\r\n\t// RENDERING DEL COMPONENTE\r\n\t//\r\n\r\n\trender() {\r\n\t\tconst {\r\n\t\t\tlabel,\r\n\t\t\tinfo,\r\n\t\t\terrMsg,\r\n\t\t\tmask,\r\n\t\t\tfieldValue,\r\n\t\t\tequalTo,\r\n\t\t\tonChange,\r\n\t\t\t...fieldProps\r\n\t\t} = this.props;\r\n\r\n\t\t// Aplico la maschera al valore inserito dall'utente prima di\r\n\t\t//  inserirlo nel campo.\r\n\t\tconst masked = maskValue(fieldValue, mask);\r\n\r\n\t\treturn (\r\n\t\t\t<section className='input-group' key={fieldProps.id}>\r\n\t\t\t\t{label && (\r\n\t\t\t\t\t<label className='main-label' htmlFor={fieldProps.id}>\r\n\t\t\t\t\t\t{label}\r\n\t\t\t\t\t</label>\r\n\t\t\t\t)}\r\n\t\t\t\t{info && <p className='info-msg'>{info}</p>}\r\n\t\t\t\t{mask\r\n\t\t\t\t\t? this.renderField(masked, this.handleMaskedField, fieldProps)\r\n\t\t\t\t\t: this.renderField(fieldValue, this.handleChange, fieldProps)}\r\n\t\t\t\t{errMsg && <p className='err-msg'>{errMsg}</p>}\r\n\t\t\t</section>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nInput.propTypes = {\r\n\t// --------- REQUIRED HTML PROPS --------- //\r\n\r\n\ttype: PropTypes.string.isRequired,\r\n\tid: PropTypes.string.isRequired,\r\n\tname: PropTypes.string.isRequired,\r\n\r\n\t// --------- MANAGING FIELD CONTENT --------- //\r\n\r\n\t// Valore contenuto all'interno del campo. Deve corrispondere ad una\r\n\t//  parte dello stato del padre, altrimenti il componente diventa\r\n\t//  incontrollato\r\n\tfieldValue: PropTypes.oneOfType([\r\n\t\tPropTypes.string, // default\r\n\t\tPropTypes.bool, // checkbox\r\n\t\tPropTypes.arrayOf(PropTypes.bool), // checkboxes\r\n\t]),\r\n\r\n\t// Callback da passare all'evento onChange dell'elemento.\r\n\t// Deve avere due parametri: l'evento e il ref dell'elemento, posto a\r\n\t//  null di default.\r\n\tonChange: PropTypes.func,\r\n\r\n\t// --------- FORWARDED REF --------- //\r\n\r\n\t// Un ref creato nel componente padre, da associare all'elemento HTML\r\n\t//  corrispondente all'input. In questo modo il componente padre può\r\n\t//  effettuare modifiche imperative all'elemento DOM.\r\n\t// Utile per i campi di tipo file e per la validazione custom.\r\n\tinnerRef: PropTypes.shape({ current: PropTypes.any }),\r\n\r\n\t// --------- CUSTOM FIELD PROPS --------- //\r\n\r\n\t// Usato per i campi a scelta multipla come select, radio e checkbox.\r\n\t// Nel caso di select deve essere un array contente il campo value dei\r\n\t//  vari tag <option> al suo interno.\r\n\t// Nel caso del tipo radio, l'array contiene i nomi di ogni pulsante radio\r\n\t//  che fa parte della scelta.\r\n\t// Nel caso del tipo checkbox, l'array contiene un oggetto per ogni\r\n\t//  pulsante, che ne determina il label e l'attributo required\r\n\toptions: PropTypes.oneOfType([\r\n\t\tPropTypes.arrayOf(PropTypes.string), // select & radios\r\n\t\tPropTypes.arrayOf(\r\n\t\t\tPropTypes.shape({\r\n\t\t\t\tlabel: PropTypes.string,\r\n\t\t\t\trequired: PropTypes.bool,\r\n\t\t\t})\r\n\t\t), // checkboxes\r\n\t]),\r\n\r\n\t// Maschera da applicare all'input dell'utente\r\n\t// Il carattere # sarà sostituito con l'input utente\r\n\tmask: PropTypes.string,\r\n\r\n\t// Serve per la validazione del campo. Contiene il valore contenuto nel\r\n\t//  campo a cui questo campo deve essere uguale.\r\n\t// Eg: se questo è il campo confirmPassword, equalTo contiene il valore\r\n\t//  del campo passoword.\r\n\tequalTo: PropTypes.string,\r\n\r\n\t// --------- FIELD'S DECORATORS --------- //\r\n\r\n\t// Contenuto dell'elemento html <label> che verrà creato sopra l'input\r\n\tlabel: PropTypes.string,\r\n\t// Messaggio per fornire ulteriori dettagli riguardo al campo\r\n\tinfo: PropTypes.string,\r\n\t// Messaggio di errore che apparirà in caso di conenuto invalido\r\n\terrMsg: PropTypes.string,\r\n};\r\n\r\nexport default Input;\r\n","import React from 'react';\r\nimport './add-button.style.scss';\r\n\r\nconst AddButton = ({ label, onClick, ...additionalHtml }) => (\r\n\t<button\r\n\t\tclassName='add-btn'\r\n\t\ttype='button'\r\n\t\tonClick={onClick}\r\n\t\t{...additionalHtml}>\r\n\t\t<span>&#10010;</span>\r\n\t\t<span>{label}</span>\r\n\t</button>\r\n);\r\n\r\nexport default AddButton;\r\n","import React from 'react';\r\nimport './remove-button.style.scss';\r\n\r\nconst RemoveButton = ({ onClick, title, ...additionalHtml }) => (\r\n\t<button\r\n\t\tclassName='rm-btn'\r\n\t\ttype='button'\r\n\t\ttitle={title}\r\n\t\tonClick={onClick}\r\n\t\t{...additionalHtml}>\r\n\t\t&#10006;\r\n\t</button>\r\n);\r\n\r\nexport default RemoveButton;\r\n","import React, { useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './fb-options.style.scss';\r\n\r\nimport AddButton from '../../components/add-button/add-button.component';\r\nimport RemoveButton from '../../components/remove-button/remove-button.component';\r\n\r\n// Questo componente crea un sub-form dinamico per la definizione delle opzioni\r\n//  dei campi select, radios e checkboxes.\r\n// Vedi il componente Input per informazioni su radios e checkboxes!\r\n\r\n// Le opzioni sono definite attraverso delle stringhe o degli oggetti (nel caso\r\n//  del tipo checkboxes). La stringa contiene il campo value dell'opzione;\r\n//  l'oggetto contiene il label che affianca il checkbox e definisce se esso\r\n//  sia required o meno.\r\n\r\nconst FBOptions = ({ onChange, optionsArray = [], isCheckboxes }) => {\r\n\t// Creo la prima sezione in automatico quando l'array è vuoto\r\n\tuseEffect(() => {\r\n\t\tif (optionsArray.length === 0) addOption();\r\n\t});\r\n\r\n\t// Aggiungo una nuova sezione per la definizione di un'opzione\r\n\tconst addOption = () => {\r\n\t\tconst currentOptions = [...optionsArray];\r\n\r\n\t\t// Tipo di dato cambia per i campi checkboxes\r\n\t\tisCheckboxes\r\n\t\t\t? currentOptions.push({ label: '', required: false })\r\n\t\t\t: currentOptions.push('');\r\n\r\n\t\t// Invio un \"evento\" custom al componente padre\r\n\t\tonChange({ target: { name: 'options', value: currentOptions } });\r\n\t};\r\n\r\n\t// Aggiorno il campo corretto dell'opzione corretta in base all'input\r\n\t// indx identifica l'opzione\r\n\t// event.target.name identifica il campo all'interno dell'opzione\r\n\tconst updateOption = (event, indx) => {\r\n\t\tconst currentOptions = [...optionsArray];\r\n\r\n\t\tswitch (event.target.name) {\r\n\t\t\tcase 'option':\r\n\t\t\t\tcurrentOptions[indx] = event.target.value;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'option-label':\r\n\t\t\t\tcurrentOptions[indx].label = event.target.value;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'option-required':\r\n\t\t\t\tlet isRequired = currentOptions[indx].required;\r\n\t\t\t\tcurrentOptions[indx].required = !isRequired;\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tconsole.error('Wrong event name in Options Builder');\r\n\t\t}\r\n\r\n\t\tonChange({ target: { name: 'options', value: currentOptions } });\r\n\t};\r\n\r\n\t// Rimuovo la sezione per la definizione dell'opzione in posizione indx\r\n\tconst removeOption = indx => {\r\n\t\tif (optionsArray.length > 1) {\r\n\t\t\tconst currentOptions = [...optionsArray];\r\n\t\t\tcurrentOptions.splice(indx, 1);\r\n\r\n\t\t\tonChange({ target: { name: 'options', value: currentOptions } });\r\n\t\t}\r\n\t};\r\n\r\n\treturn (\r\n\t\t<fieldset className='options-builder'>\r\n\t\t\t{optionsArray.map((option, indx) => (\r\n\t\t\t\t<div\r\n\t\t\t\t\tclassName={\r\n\t\t\t\t\t\t!isCheckboxes ? 'option-container' : 'checkboxes-container'\r\n\t\t\t\t\t}\r\n\t\t\t\t\tkey={'option' + indx}>\r\n\t\t\t\t\t{!isCheckboxes ? (\r\n\t\t\t\t\t\t<>\r\n\t\t\t\t\t\t\t<label htmlFor={indx}>Option {indx + 1}: </label>\r\n\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\ttype='text'\r\n\t\t\t\t\t\t\t\tname='option'\r\n\t\t\t\t\t\t\t\tid={indx}\r\n\t\t\t\t\t\t\t\tvalue={option}\r\n\t\t\t\t\t\t\t\tonChange={e => updateOption(e, indx)}\r\n\t\t\t\t\t\t\t\tplaceholder=\"Option's name\"\r\n\t\t\t\t\t\t\t\trequired\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</>\r\n\t\t\t\t\t) : (\r\n\t\t\t\t\t\t<>\r\n\t\t\t\t\t\t\t<label>Option {indx + 1}: </label>\r\n\t\t\t\t\t\t\t<label htmlFor={indx}>Checkbox Label </label>\r\n\t\t\t\t\t\t\t<label htmlFor={'req-' + indx}>Required? </label>\r\n\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\ttype='text'\r\n\t\t\t\t\t\t\t\tname='option-label'\r\n\t\t\t\t\t\t\t\tid={indx}\r\n\t\t\t\t\t\t\t\tvalue={option.label}\r\n\t\t\t\t\t\t\t\tonChange={e => updateOption(e, indx)}\r\n\t\t\t\t\t\t\t\tplaceholder=\"Option's name\"\r\n\t\t\t\t\t\t\t\trequired\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\ttype='checkbox'\r\n\t\t\t\t\t\t\t\tname='option-required'\r\n\t\t\t\t\t\t\t\tid={'req-' + indx}\r\n\t\t\t\t\t\t\t\tvalue='isRequired'\r\n\t\t\t\t\t\t\t\tchecked={option.required}\r\n\t\t\t\t\t\t\t\tonChange={e => updateOption(e, indx)}\r\n\t\t\t\t\t\t\t\tdisabled={option.label === ''}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</>\r\n\t\t\t\t\t)}\r\n\t\t\t\t\t<RemoveButton\r\n\t\t\t\t\t\ttitle={\r\n\t\t\t\t\t\t\toptionsArray.length === 1\r\n\t\t\t\t\t\t\t\t? \"You can't remove this option\"\r\n\t\t\t\t\t\t\t\t: 'Remove this option'\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tonClick={() => removeOption(indx)}\r\n\t\t\t\t\t\tdisabled={optionsArray.length === 1}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t))}\r\n\t\t\t<AddButton label='ADD NEW OPTION' onClick={addOption} />\r\n\t\t</fieldset>\r\n\t);\r\n};\r\n\r\nFBOptions.propTypes = {\r\n\t// Array contenente le opzioni già inserite dall'utente e quelle non ancora\r\n\t//  compilate. Nel caso sia undefined viene inizializzato come array vuoto.\r\n\toptionsArray: PropTypes.arrayOf(\r\n\t\tPropTypes.oneOfType([\r\n\t\t\t// E' la stringa che sarà contenuta nel campo value della singola\r\n\t\t\t//  opzione del campo select o radios generato.\r\n\t\t\tPropTypes.string,\r\n\r\n\t\t\t// Per il tipo checkboxes.\r\n\t\t\tPropTypes.shape({\r\n\t\t\t\tlabel: PropTypes.string,\r\n\t\t\t\trequired: PropTypes.bool,\r\n\t\t\t}),\r\n\t\t])\r\n\t),\r\n\r\n\t// La funzione onChange del componente padre. Riceve in input un evento.\r\n\tonChange: PropTypes.func.isRequired,\r\n\r\n\t// Bool che determina se il campo che l'utente sta creando è di tipo\r\n\t//  checkboxes o meno. Il tipo checkboxes richiede infatti un trattamento\r\n\t//  specifico.\r\n\tisCheckboxes: PropTypes.bool.isRequired,\r\n};\r\n\r\nexport default React.memo(FBOptions);\r\n","// Lista degli attributi html supportati per i vari tipi di campi input\r\n\r\nexport const supportedHtmlAttributes = [\r\n\t'accept',\r\n\t'autoComplete',\r\n\t'autoFocus',\r\n\t'capture',\r\n\t'dirname',\r\n\t'disabled',\r\n\t'form',\r\n\t'max',\r\n\t'maxLength',\r\n\t'min',\r\n\t'minLength',\r\n\t'multiple',\r\n\t'pattern',\r\n\t'placeholder',\r\n\t'readOnly',\r\n\t'size',\r\n\t'step',\r\n];\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { supportedHtmlAttributes } from './html-attributes';\r\nimport './fb-additional-html.style.scss';\r\n\r\nimport AddButton from '../../components/add-button/add-button.component';\r\nimport RemoveButton from '../../components/remove-button/remove-button.component';\r\n\r\n// Questo componente crea un sub-form dinamico per la definizione degli\r\n//  attributi html da associare al campo creato nel componente FieldBuilder.\r\n\r\n// Per ogni attributo html deve essere specificato il nome e il valore.\r\n// Il nome è controllato attraverso un campo select generato a partire da\r\n//  supportedHtmlAttributes.\r\n// Il valore non è validato in alcun modo e sta all'utente inserire un valore\r\n//  opportuno. Nel caso di valori errati, html ignorerà l'attributo.\r\n\r\nconst FBAdditionalHtml = ({ onChange, additionalAttribs = [] }) => {\r\n\t// Aggiungo una nuova sezione per la definizione di un attributo html\r\n\tconst addAttrib = () => {\r\n\t\tconst newArray = [...additionalAttribs];\r\n\t\tnewArray.push({ name: '', value: '' });\r\n\r\n\t\t// Invio un \"evento\" custom al componente padre\r\n\t\tonChange({ target: { name: 'additionalAttribs', value: newArray } });\r\n\t};\r\n\r\n\t// Aggiorno il nome dell'attributo in posizione indx in base all'input\r\n\tconst updateAttribName = (event, indx) => {\r\n\t\tconst newArray = [...additionalAttribs];\r\n\t\tnewArray[indx].name = event.target.value;\r\n\r\n\t\tonChange({ target: { name: 'additionalAttribs', value: newArray } });\r\n\t};\r\n\r\n\t// Aggiorno il valore dell'attributo in posizione indx in base all'input\r\n\tconst updateAttribValue = (event, indx) => {\r\n\t\tconst newArray = [...additionalAttribs];\r\n\t\tnewArray[indx].value = event.target.value;\r\n\r\n\t\tonChange({ target: { name: 'additionalAttribs', value: newArray } });\r\n\t};\r\n\r\n\t// Rimuovo la sezione per la definizione dell'attributo in posizione indx\r\n\tconst removeAttrib = indx => {\r\n\t\tconst newArray = [...additionalAttribs];\r\n\t\tnewArray.splice(indx, 1);\r\n\r\n\t\tonChange({ target: { name: 'additionalAttribs', value: newArray } });\r\n\t};\r\n\r\n\treturn (\r\n\t\t<fieldset className='html-attributes'>\r\n\t\t\t<legend>HTML Attributes</legend>\r\n\t\t\t{additionalAttribs.map((attrib, indx) => (\r\n\t\t\t\t<div className='attribute-container' key={'attrib' + indx}>\r\n\t\t\t\t\t<label>Attribute {indx + 1}: </label>\r\n\t\t\t\t\t<label htmlFor={'attr-name' + indx}>Name</label>\r\n\t\t\t\t\t<label htmlFor={'attr-value' + indx}>Value</label>\r\n\t\t\t\t\t<select\r\n\t\t\t\t\t\tid={'attr-name' + indx}\r\n\t\t\t\t\t\tvalue={attrib.name}\r\n\t\t\t\t\t\tonChange={e => updateAttribName(e, indx)}\r\n\t\t\t\t\t\trequired>\r\n\t\t\t\t\t\t<option value=''>Choose the HTML attribute</option>\r\n\t\t\t\t\t\t{supportedHtmlAttributes.map((htmlAttrib, indx) => (\r\n\t\t\t\t\t\t\t<option key={htmlAttrib + indx} value={htmlAttrib}>\r\n\t\t\t\t\t\t\t\t{htmlAttrib}\r\n\t\t\t\t\t\t\t</option>\r\n\t\t\t\t\t\t))}\r\n\t\t\t\t\t</select>\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\ttype='text'\r\n\t\t\t\t\t\tname={attrib}\r\n\t\t\t\t\t\tid={'attr-value' + indx}\r\n\t\t\t\t\t\tvalue={attrib.value}\r\n\t\t\t\t\t\tonChange={e => updateAttribValue(e, indx)}\r\n\t\t\t\t\t\tplaceholder=\"Insert the attribute's value\"\r\n\t\t\t\t\t\tdisabled={attrib.name === ''}\r\n\t\t\t\t\t\trequired\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<RemoveButton\r\n\t\t\t\t\t\ttitle='Remove this html attribute'\r\n\t\t\t\t\t\tonClick={() => removeAttrib(indx)}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t))}\r\n\r\n\t\t\t<AddButton label='ADD NEW HTML ATTRIBUTE' onClick={addAttrib} />\r\n\t\t</fieldset>\r\n\t);\r\n};\r\n\r\nFBAdditionalHtml.propTypes = {\r\n\t// Array contenente gli attributi html già inseriti dall'utente e quelli\r\n\t//  vuoti ancora da compilare. Nel caso sia undefined viene inizializzato\r\n\t//  come un array vuoto.\r\n\tadditionalAttribs: PropTypes.arrayOf(\r\n\t\tPropTypes.shape({\r\n\t\t\tname: PropTypes.string,\r\n\t\t\tvalue: PropTypes.string,\r\n\t\t})\r\n\t),\r\n\r\n\t// La funzione onChange del componente padre. Riceve in input un evento.\r\n\tonChange: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default React.memo(FBAdditionalHtml);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { supportedTypes } from '../../form-custom/form/form.types';\r\nimport Input from '../../form-custom/input/input.component';\r\n\r\nimport { FBOptions, FBAdditionalHtml } from '../fb-custom-fields';\r\n\r\nimport './field-builder.style.scss';\r\n\r\n// FieldBuilder si occupa di generare un sub-form che consente all'utente di\r\n//  specificare tutte le proprietà html e custom relative ad un singolo campo\r\n//  del form custom che sta creando.\r\n\r\nconst TYPES_WITH_OPTIONS = ['select', 'radios', 'checkboxes'];\r\nconst TEXT_TYPES = ['text', 'email', 'password', 'url', 'tel'];\r\n\r\nclass FieldBuilder extends React.PureComponent {\r\n\t//\r\n\t// HANDLE CHANGE\r\n\t// Costruisce un nuovo oggetto fieldData a seguito dell'input dell'utente,\r\n\t//  in maniera consona al tipo di campo che sta venendo costruito\r\n\t//\r\n\r\n\thandleChange = event => {\r\n\t\tconst { indx, onChange, fieldData, usedNames } = this.props;\r\n\r\n\t\t// Copia di fieldData, in modo da non mutare l'originale\r\n\t\tconst newFieldData = { ...fieldData };\r\n\r\n\t\tswitch (event.target.name) {\r\n\t\t\t// Il nome di un campo del form deve essere unico, in quanto da\r\n\t\t\t//  esso dipende il nome dello stato interno al form\r\n\t\t\t// L'id del campo viene generato automaticamente a partire dal nome\r\n\t\t\tcase 'name':\r\n\t\t\t\t// Utilizzo il prop usedNames per validare il campo\r\n\t\t\t\tevent.target.setCustomValidity('');\r\n\t\t\t\tif (usedNames.includes(event.target.value)) {\r\n\t\t\t\t\tevent.target.setCustomValidity('This name has already been used!');\r\n\t\t\t\t}\r\n\t\t\t\tnewFieldData.name = event.target.value;\r\n\r\n\t\t\t\t// Genero l'id in base al nome: name_234\r\n\t\t\t\tif (event.target.value) {\r\n\t\t\t\t\tnewFieldData.id =\r\n\t\t\t\t\t\tevent.target.value + '_' + Math.floor(Math.random() * 1000);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tnewFieldData.id = '';\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\r\n\t\t\t// I checkbox salvano lo stato booleano in checked\r\n\t\t\tcase 'required':\r\n\t\t\t\tnewFieldData[event.target.name] = event.target.checked;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\t// Il tipo del campo influenza i suoi attributi!\r\n\t\t\t// Mi assicuro di eliminare tutti gli attributi specifici\r\n\t\t\t//  per particolari tipi dallo stato\r\n\t\t\tcase 'type':\r\n\t\t\t\t// Mi assicuro che il tipo sia stato variato\r\n\t\t\t\tif (fieldData.type && fieldData.type !== event.target.value) {\r\n\t\t\t\t\t// Campi select, radios e checkboxes\r\n\t\t\t\t\tif (TYPES_WITH_OPTIONS.includes(fieldData.type)) {\r\n\t\t\t\t\t\t// Il vecchio type includeva la possibilità di inserire\r\n\t\t\t\t\t\t//  delle opzioni\r\n\t\t\t\t\t\t// Elimino il campo options dallo stato se esiste\r\n\t\t\t\t\t\tnewFieldData.options && delete newFieldData.options;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Campi text, email, password, ...\r\n\t\t\t\t\tif (TEXT_TYPES.includes(fieldData.type)) {\r\n\t\t\t\t\t\t// Il vecchio type era un tipo testuale\r\n\t\t\t\t\t\t// Elimino i campi mask e equalTo se esistono\r\n\t\t\t\t\t\tnewFieldData.mask && delete newFieldData.mask;\r\n\t\t\t\t\t\tnewFieldData.equalTo && delete newFieldData.equalTo;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tnewFieldData[event.target.name] = event.target.value;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\t// NOTA: i sub-form FBOptions e FBHtml gestiscono internamente la\r\n\t\t\t//  logica di handling e chiamano questa funzione con un evento\r\n\t\t\t//  custom gestibile da default\r\n\t\t\tdefault:\r\n\t\t\t\tnewFieldData[event.target.name] = event.target.value;\r\n\t\t}\r\n\t\tonChange(newFieldData, indx);\r\n\t};\r\n\r\n\t//\r\n\t// RENDER DEL COMPONENTE\r\n\t// Renderizzo tutti i campi necessari a definire tutte le proprietà di un\r\n\t//  singolo campo di un form. Ragguppo i campi in fieldsets.\r\n\t//\r\n\r\n\trender() {\r\n\t\tconst {\r\n\t\t\tname,\r\n\t\t\tid,\r\n\t\t\ttype,\r\n\t\t\toptions,\r\n\t\t\tequalTo,\r\n\t\t\tmask,\r\n\t\t\trequired,\r\n\t\t\tadditionalAttribs,\r\n\t\t\tlabel,\r\n\t\t\tinfo,\r\n\t\t\terrMsg,\r\n\t\t} = this.props.fieldData;\r\n\r\n\t\treturn (\r\n\t\t\t<div className='field-builder'>\r\n\t\t\t\t<fieldset className='fb-basic'>\r\n\t\t\t\t\t<legend>Basic Field Properties</legend>\r\n\t\t\t\t\t<Input\r\n\t\t\t\t\t\ttype='text'\r\n\t\t\t\t\t\tname='name'\r\n\t\t\t\t\t\tid='name'\r\n\t\t\t\t\t\tfieldValue={name}\r\n\t\t\t\t\t\tonChange={this.handleChange}\r\n\t\t\t\t\t\trequired={true}\r\n\t\t\t\t\t\tplaceholder='Eg: userName'\r\n\t\t\t\t\t\tpattern=\"[^$&+,:;.=?@#|'<>^*()%! ]{1,}\"\r\n\t\t\t\t\t\tlabel='Name'\r\n\t\t\t\t\t\terrMsg={`The name must be unique\r\n\t\t\t\t\t\t\tNo spaces and special characters!`}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<Input\r\n\t\t\t\t\t\ttype='text'\r\n\t\t\t\t\t\tname='id'\r\n\t\t\t\t\t\tid='id'\r\n\t\t\t\t\t\tfieldValue={id}\r\n\t\t\t\t\t\treadOnly\r\n\t\t\t\t\t\tplaceholder='This field will auto-fill'\r\n\t\t\t\t\t\tlabel='Id'\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<Input\r\n\t\t\t\t\t\ttype='select'\r\n\t\t\t\t\t\tname='type'\r\n\t\t\t\t\t\tid='type'\r\n\t\t\t\t\t\tfieldValue={type}\r\n\t\t\t\t\t\tonChange={this.handleChange}\r\n\t\t\t\t\t\toptions={supportedTypes}\r\n\t\t\t\t\t\trequired={true}\r\n\t\t\t\t\t\tlabel='Type'\r\n\t\t\t\t\t\terrMsg='Choose the field type'\r\n\t\t\t\t\t/>\r\n\r\n\t\t\t\t\t{type && TYPES_WITH_OPTIONS.includes(type) && (\r\n\t\t\t\t\t\t<FBOptions\r\n\t\t\t\t\t\t\toptionsArray={options}\r\n\t\t\t\t\t\t\tonChange={this.handleChange}\r\n\t\t\t\t\t\t\tisCheckboxes={type === 'checkboxes'}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t)}\r\n\r\n\t\t\t\t\t{type && type !== 'checkboxes' && (\r\n\t\t\t\t\t\t<Input\r\n\t\t\t\t\t\t\ttype='checkbox'\r\n\t\t\t\t\t\t\tname='required'\r\n\t\t\t\t\t\t\tid='required'\r\n\t\t\t\t\t\t\tfieldValue={required}\r\n\t\t\t\t\t\t\tonChange={this.handleChange}\r\n\t\t\t\t\t\t\tlabel='Is Required?'\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t)}\r\n\t\t\t\t</fieldset>\r\n\r\n\t\t\t\t{type && TEXT_TYPES.includes(type) && (\r\n\t\t\t\t\t<fieldset className='fb-validation'>\r\n\t\t\t\t\t\t<legend>Custom Field Validation</legend>\r\n\t\t\t\t\t\t<Input\r\n\t\t\t\t\t\t\ttype='text'\r\n\t\t\t\t\t\t\tname='equalTo'\r\n\t\t\t\t\t\t\tid='equalTo'\r\n\t\t\t\t\t\t\tfieldValue={equalTo}\r\n\t\t\t\t\t\t\tonChange={this.handleChange}\r\n\t\t\t\t\t\t\tplaceholder='Insert the name of the other field'\r\n\t\t\t\t\t\t\tlabel='EqualTo'\r\n\t\t\t\t\t\t\tinfo='This custom attribute allows to specify a field that this field must be equal to in order to be valid.'\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<Input\r\n\t\t\t\t\t\t\ttype='text'\r\n\t\t\t\t\t\t\tname='mask'\r\n\t\t\t\t\t\t\tid='mask'\r\n\t\t\t\t\t\t\tfieldValue={mask}\r\n\t\t\t\t\t\t\tonChange={this.handleChange}\r\n\t\t\t\t\t\t\tplaceholder='Eg: (###) ###-###'\r\n\t\t\t\t\t\t\tlabel='Mask'\r\n\t\t\t\t\t\t\tinfo='This custom attribute allows to specify a mask for the field. The mask must have # as the masked character.'\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</fieldset>\r\n\t\t\t\t)}\r\n\r\n\t\t\t\t<FBAdditionalHtml\r\n\t\t\t\t\tadditionalAttribs={additionalAttribs}\r\n\t\t\t\t\tonChange={this.handleChange}\r\n\t\t\t\t/>\r\n\r\n\t\t\t\t<fieldset className='fb-descriptors'>\r\n\t\t\t\t\t<legend>Field Descriptors</legend>\r\n\t\t\t\t\t<Input\r\n\t\t\t\t\t\ttype='text'\r\n\t\t\t\t\t\tname='label'\r\n\t\t\t\t\t\tid='label'\r\n\t\t\t\t\t\tfieldValue={label}\r\n\t\t\t\t\t\tonChange={this.handleChange}\r\n\t\t\t\t\t\trequired={true}\r\n\t\t\t\t\t\tplaceholder='Insert the label of the field'\r\n\t\t\t\t\t\tlabel='Label'\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<Input\r\n\t\t\t\t\t\ttype='textarea'\r\n\t\t\t\t\t\tname='info'\r\n\t\t\t\t\t\tid='info'\r\n\t\t\t\t\t\tfieldValue={info}\r\n\t\t\t\t\t\tonChange={this.handleChange}\r\n\t\t\t\t\t\tplaceholder='Eg: Write a small description about the field to help the user understand it'\r\n\t\t\t\t\t\tlabel='Info Message'\r\n\t\t\t\t\t\tinfo='Write a small description about the field to help the user understand it'\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<Input\r\n\t\t\t\t\t\ttype='textarea'\r\n\t\t\t\t\t\tname='errMsg'\r\n\t\t\t\t\t\tid='errMsg'\r\n\t\t\t\t\t\tfieldValue={errMsg}\r\n\t\t\t\t\t\tonChange={this.handleChange}\r\n\t\t\t\t\t\trequired={true}\r\n\t\t\t\t\t\tplaceholder='Eg: Only letters allowed'\r\n\t\t\t\t\t\tlabel='Error Message'\r\n\t\t\t\t\t\tinfo='Write the error message that should appear when the field is invalid'\r\n\t\t\t\t\t/>\r\n\t\t\t\t</fieldset>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nFieldBuilder.propTypes = {\r\n\t// Il FieldBuilder è sostanzialmente controllato dal prop fieldData, che\r\n\t//  contiene i valori contenuti nei suoi campi.\r\n\t// Ognuno di questi campi rappresenta una proprietà di un singolo campo\r\n\t//  del form che l'utente sta creando.\r\n\r\n\tfieldData: PropTypes.shape({\r\n\t\tname: PropTypes.string,\r\n\t\tid: PropTypes.string,\r\n\t\ttype: PropTypes.string,\r\n\t\toptions: PropTypes.array,\r\n\t\tequalTo: PropTypes.string,\r\n\t\tmask: PropTypes.string,\r\n\t\trequired: PropTypes.bool,\r\n\t\tadditionalAttribs: PropTypes.array,\r\n\t\tlabel: PropTypes.string,\r\n\t\tinfo: PropTypes.string,\r\n\t\terrMsg: PropTypes.string,\r\n\t}),\r\n\r\n\t// indx serve a identificare il FieldBuilder all'interno del FormBuilder.\r\n\t// E' la posizione di fieldData all'interno dell'array fieldsData utilizzato\r\n\t//  nel componente FormBuilder\r\n\r\n\tindx: PropTypes.number.isRequired,\r\n\r\n\t// Array contenente i valori dei campi 'name' di ogni FieldBuilder presente\r\n\t//  in FormBuilder. Serve per la validazione del campo 'name', che deve\r\n\t//  essere univoco\r\n\r\n\tusedNames: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n\r\n\t// Funzione per la gestione dell'input di FormBuilder. Deve essere chiamata\r\n\t//  dopo ogni input dell'utente e riceve in ingresso una copia aggiornata\r\n\t//  del prop fieldData e l'indice del FieldBuilder\r\n\r\n\tonChange: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default FieldBuilder;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './form-button.style.scss';\r\n\r\n// I pulsanti di tipo 'button' devono includere una funzione onClick custom.\r\n// I pulsanti di tipo 'submit' e 'reset' non richiedono una funzione onClick\r\n//  in quanto triggerano in automatico i rispettivi eventi nel form.\r\n\r\nconst FormButton = ({ id, type, value, onClick }) => {\r\n\treturn (\r\n\t\t<button\r\n\t\t\tclassName='form-btn'\r\n\t\t\ttype={type}\r\n\t\t\tid={id}\r\n\t\t\tonClick={type === 'button' ? onClick : null}>\r\n\t\t\t{value}\r\n\t\t</button>\r\n\t);\r\n};\r\n\r\nFormButton.propTypes = {\r\n\t// Tipo, id del pulsante html che deve essere generato\r\n\tid: PropTypes.string.isRequired,\r\n\ttype: PropTypes.string, // default: button\r\n\r\n\t// Stringa da far apparire sul pulsante\r\n\tvalue: PropTypes.string.isRequired,\r\n\r\n\t// Callback richiesta solo per i pulsanti di tipo button\r\n\t// Specifica l'azione custom che svolgono questi pulsanti\r\n\tonClick: (props, propName, componentName) => {\r\n\t\tif (props.type === 'button') {\r\n\t\t\tif (!(props[propName] instanceof Function)) {\r\n\t\t\t\treturn new Error(\r\n\t\t\t\t\t`Invalid prop ${propName} supplied to ${componentName}. Validation failed.`\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n};\r\n\r\nFormButton.defaultProps = {\r\n\ttype: 'button',\r\n};\r\n\r\nexport default React.memo(FormButton);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './form-builder.style.scss';\r\n\r\nimport FieldBuilder from '../field-builder/field-builder.component';\r\nimport Input from '../../form-custom/input/input.component';\r\nimport FormButton from '../../components/form-button/form-button.component';\r\nimport AddButton from '../../components/add-button/add-button.component';\r\nimport RemoveButton from '../../components/remove-button/remove-button.component';\r\n\r\n// Il FormBuilder è un form che permette all'utente di creare graficamente un\r\n//  array di oggetti js compatibile con il componente Form.\r\n// Sfruttando FormBuilder e Form insieme è possibile creare graficamente un\r\n//  form completamente customizzato e pre-stilizzato.\r\n\r\n// Una applicazione del FormBuilder potrebbe essere all'interno di un servizio\r\n//  per la creazione facile di siti web. Tuttavia in questo caso, il FormBuilder\r\n//  è utilizzato per mostrare le potenzialità dei componenti Form e Input.\r\n\r\n// FormBuilder utilizza al suo interno il componente FieldBuilder.\r\n// FieldBuilder si occupa di generare un sub-form che consente all'utente di\r\n//  specificare tutte le proprietà html e custom relative ad un singolo campo\r\n//  del form custom che sta creando.\r\n\r\nclass FormBuilder extends React.PureComponent {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\t// Titolo del form che l'utente sta creando\r\n\t\t\ttitle: '',\r\n\t\t\t// Array di oggetti. Ogni oggetto corrisponde ai campi contenuti\r\n\t\t\t//  nel sub-form FieldBuilder corrispondente a quell'indice.\r\n\t\t\tfieldsData: [{}],\r\n\t\t};\r\n\r\n\t\t// Lista dei nomi usati in FieldsBuilder per identificare i campi\r\n\t\t// Tali nomi devono essere unici!\r\n\t\tthis.usedNames = [];\r\n\t}\r\n\r\n\t// Aggiunge un nuovo FieldBuilder vuoto\r\n\taddField = () => {\r\n\t\tthis.setState({ fieldsData: [...this.state.fieldsData, {}] });\r\n\t};\r\n\r\n\t// Rimuove il FieldBuilder con indice pari a indx\r\n\tremoveField = indx => {\r\n\t\tif (this.state.fieldsData.length > 1) {\r\n\t\t\tconst newFieldsData = [...this.state.fieldsData];\r\n\t\t\tnewFieldsData.splice(indx, 1);\r\n\t\t\tthis.setState({ fieldsData: newFieldsData });\r\n\t\t}\r\n\t};\r\n\r\n\t// Riceve i campi aggiornati del sub-form FieldBuilder con indice indx\r\n\thandleChange = (newFieldData, indx) => {\r\n\t\tconst newFieldsData = [...this.state.fieldsData];\r\n\t\tnewFieldsData[indx] = newFieldData;\r\n\t\tthis.setState({ fieldsData: newFieldsData });\r\n\t};\r\n\r\n\t// Gestisce la variazione del campo title\r\n\thandleTitleChange = event => {\r\n\t\tthis.setState({ title: event.target.value });\r\n\t};\r\n\r\n\t// Gestisce il submit\r\n\thandleSubmit = event => {\r\n\t\tevent.preventDefault();\r\n\r\n\t\tif (this.state.fieldsData.length === 0) return;\r\n\r\n\t\t// Deep copy\r\n\t\tconst fieldsDataCopy = JSON.parse(JSON.stringify(this.state.fieldsData));\r\n\r\n\t\t// Faccio lo spreading di additionalAttribs in ogni campo\r\n\t\tthis.spreadAdditionalAttribs(fieldsDataCopy);\r\n\r\n\t\t// Aggiungo un submit e un reset button\r\n\t\tconst submitBtn = {\r\n\t\t\ttype: 'submit',\r\n\t\t\tname: 'submit-btn',\r\n\t\t\tid: 'submit-btn',\r\n\t\t\tvalue: 'SUBMIT',\r\n\t\t};\r\n\t\tconst resetBtn = {\r\n\t\t\ttype: 'reset',\r\n\t\t\tname: 'reset-btn',\r\n\t\t\tid: 'reset-btn',\r\n\t\t\tvalue: 'RESET',\r\n\t\t};\r\n\t\tfieldsDataCopy.push(submitBtn, resetBtn);\r\n\r\n\t\t// Invio i campi al componente padre\r\n\t\tthis.props.onSubmit(this.state.title, fieldsDataCopy);\r\n\r\n\t\t// Resetto il form\r\n\t\tthis.setState({ title: '', fieldsData: [{}] });\r\n\t};\r\n\r\n\t// additionalAttribs è un array di oggetti contenuto in fieldsData:\r\n\t//  FD: {..., additionalAttribs: [{name, value}, {name,value}, ...], ...}\r\n\t// Voglio distribuire i suoi elementi in fieldsData:\r\n\t//  FD: {..., name:value, name:value, ..., ...}\r\n\t// IMPORTANTE: questa funzione muta l'oggetto che riceve in input!\r\n\tspreadAdditionalAttribs = fieldsData => {\r\n\t\t// Cerco additionalAttribs in fieldsData\r\n\t\tfor (let i = 0; i < fieldsData.length; i++) {\r\n\t\t\tif (fieldsData[i].additionalAttribs) {\r\n\t\t\t\t// se additionalAttribs è presente, lo copio in attribsArr e\r\n\t\t\t\t//  poi lo elimino da fieldsData\r\n\t\t\t\tconst attribsArr = [...fieldsData[i].additionalAttribs];\r\n\t\t\t\tdelete fieldsData[i].additionalAttribs;\r\n\r\n\t\t\t\t// Creo dei nuovi elementi in fieldsData che hanno i nomi e i\r\n\t\t\t\t//  valori degli elementi contenuti in attribsArr\r\n\t\t\t\tfor (let j = 0; j < attribsArr.length; j++) {\r\n\t\t\t\t\tfieldsData[i][attribsArr[j].name] = attribsArr[j].value;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t// Calcolo il valore di usedNames in base allo stato fieldsData.\r\n\t// Evito di mutare usedNames se il suo valore non è cambiato rispetto al\r\n\t//  render precedente. In questo modo i componenti FieldBuilders non\r\n\t//  verranno rirenderizzati inutilmente.\r\n\trecomputeUsedNames = () => {\r\n\t\t// Calcolo il valore aggiornato di usedNames utilizzando una nuova\r\n\t\t//  variabile in modo da non mutare this.usedNames.\r\n\t\tconst newUsedNames = this.state.fieldsData\r\n\t\t\t.filter(field => field.name)\r\n\t\t\t.map(field => field.name);\r\n\r\n\t\t// Confronto newUsedNames e this.usedNames. Muto this.usedNames solo se\r\n\t\t//  i due array sono diversi.\r\n\t\t// Per tentare di ottimizzare il confronto verifico prima se le\r\n\t\t//  lunghezze sono uguali.\r\n\t\tif (newUsedNames.length !== this.usedNames.length) {\r\n\t\t\tthis.usedNames = newUsedNames;\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\tfor (let i = 0; i < newUsedNames.length; i++) {\r\n\t\t\tif (newUsedNames[i] !== this.usedNames[i]) {\r\n\t\t\t\tthis.usedNames = newUsedNames;\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Non ci sono stati cambiamenti, this.usedNames è immutato.\r\n\t\treturn false;\r\n\t};\r\n\r\n\t//\r\n\t// RENDER DEL COMPONENTE\r\n\t//\r\n\r\n\trender() {\r\n\t\tthis.recomputeUsedNames();\r\n\r\n\t\treturn (\r\n\t\t\t<form onSubmit={this.handleSubmit} className='form-builder'>\r\n\t\t\t\t<h1>FORM BUILDER</h1>\r\n\r\n\t\t\t\t<fieldset className='title-container'>\r\n\t\t\t\t\t<Input\r\n\t\t\t\t\t\ttype='text'\r\n\t\t\t\t\t\tname='formTitle'\r\n\t\t\t\t\t\tid='formTitle'\r\n\t\t\t\t\t\tfieldValue={this.state.title}\r\n\t\t\t\t\t\tonChange={this.handleTitleChange}\r\n\t\t\t\t\t\tlabel='Form Title'\r\n\t\t\t\t\t\terrMsg='Only numbers and letters'\r\n\t\t\t\t\t\trequired={true}\r\n\t\t\t\t\t\tpattern='[a-zA-Z0-9 ]{0,}'\r\n\t\t\t\t\t\tplaceholder='Insert the title of the form you are building'\r\n\t\t\t\t\t/>\r\n\t\t\t\t</fieldset>\r\n\r\n\t\t\t\t{this.state.fieldsData.map((fieldData, indx) => (\r\n\t\t\t\t\t<fieldset key={indx} className='fb-container'>\r\n\t\t\t\t\t\t<header className='builder-header'>\r\n\t\t\t\t\t\t\t<h2>BUILD FIELD {indx + 1}</h2>\r\n\t\t\t\t\t\t\t<RemoveButton\r\n\t\t\t\t\t\t\t\tid='remove-field'\r\n\t\t\t\t\t\t\t\tonClick={() => this.removeField(indx)}\r\n\t\t\t\t\t\t\t\ttitle={\r\n\t\t\t\t\t\t\t\t\tthis.state.fieldsData.length === 1\r\n\t\t\t\t\t\t\t\t\t\t? \"YOU CAN'T REMOVE THIS FIELD\"\r\n\t\t\t\t\t\t\t\t\t\t: 'REMOVE THIS FIELD'\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tdisabled={this.state.fieldsData.length === 1}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</header>\r\n\r\n\t\t\t\t\t\t<FieldBuilder\r\n\t\t\t\t\t\t\tindx={indx}\r\n\t\t\t\t\t\t\tfieldData={fieldData}\r\n\t\t\t\t\t\t\tusedNames={this.usedNames}\r\n\t\t\t\t\t\t\tonChange={this.handleChange}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</fieldset>\r\n\t\t\t\t))}\r\n\r\n\t\t\t\t<AddButton\r\n\t\t\t\t\tid='add-field'\r\n\t\t\t\t\tlabel='ADD NEW FIELD'\r\n\t\t\t\t\tonClick={this.addField}\r\n\t\t\t\t/>\r\n\t\t\t\t<FormButton type='submit' id='submit' value='SUBMIT' />\r\n\t\t\t</form>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nFormBuilder.propTypes = {\r\n\t// Funzione per la gestione del submit da parte del componente padre.\r\n\t// Il componente Form chiamerà questa funzione inserendo in input i valori\r\n\t//  title e fieldsData contenuti nel suo stato.\r\n\tonSubmit: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default FormBuilder;\r\n","import { supportedTypes, btnTypes } from './form.types';\r\n\r\n// Divido gli elmenti contenuti in formData in base al loro tipo\r\n// Fields: contiene solo i campi input supportati, tranne i pulsanti\r\n// Btns: contiene solo i pulsanti\r\n// unsupported: contiene i campi input con tipo non supportato o sconosciuto\r\n\r\nexport const calculateFieldsArrays = formData => {\r\n\tconst fields = [];\r\n\tconst btns = [];\r\n\tconst unsupported = [];\r\n\r\n\tlet fieldsInx = 0;\r\n\tlet btnsIndx = 0;\r\n\tlet unsupIndx = 0;\r\n\r\n\tfor (let i = 0; i < formData.length; i++) {\r\n\t\tif (supportedTypes.includes(formData[i].type)) {\r\n\t\t\tfields[fieldsInx] = formData[i];\r\n\t\t\tfieldsInx++;\r\n\t\t} else if (btnTypes.includes(formData[i].type)) {\r\n\t\t\tbtns[btnsIndx] = formData[i];\r\n\t\t\tbtnsIndx++;\r\n\t\t} else {\r\n\t\t\tunsupported[unsupIndx] = formData[i];\r\n\t\t\tunsupIndx++;\r\n\t\t}\r\n\t}\r\n\r\n\treturn [fields, btns, unsupported];\r\n};\r\n\r\n// Costruisco un oggetto a partire dall'array fieldsData utilizzando reduce:\r\n// \testraggo il campo name da ogni elemento di fieldsData e gli associo un\r\n// \tvalore iniziale pari a null.\r\n// Nel caso di un campo select, devo assegnargli la prima opzione, cioè quella\r\n//  visibile di default, come valore iniziale.\r\n// Nel caso del tipo checkboxes, è necessario inizializzare un array di false\r\n//  di dimensione pari al numero di pulsanti checkbox che verranno generati.\r\n\r\nexport const createInitialState = fieldsData =>\r\n\tfieldsData.reduce((state, field) => {\r\n\t\tif (field.name) {\r\n\t\t\tif (field.type === 'select') state[field.name] = field.options[0];\r\n\t\t\telse if (field.type === 'checkboxes')\r\n\t\t\t\tstate[field.name] = Array(field.options.length).fill(false);\r\n\t\t\telse state[field.name] = '';\r\n\t\t}\r\n\t\treturn state;\r\n\t}, {});\r\n\r\n// Eseguo la shallow comparison tra due formData\r\n// Questa funzione è da utilizzare nel metodo shouldComponentUpdate del\r\n//  componente Form, nel caso si scelga un approccio in cui Form varia il suo\r\n//  stato la variare del prop formData.\r\n// Al momento questa funzione non è utilizzata in quanto è stato scelto un\r\n//  altro approccio: il componente Form è un componente completamente\r\n//  incontrollato, la cui chiave è uguale alla versione stringa di formData.\r\n// Al variare di formData, l'intero componente viene automaticamente resettato.\r\n\r\nexport const shallowCompareFormData = (oldFormData, newFormData) => {\r\n\t// Confronto la reference\r\n\tif (oldFormData !== newFormData) {\r\n\t\t// La reference è diversa, confronto la lunghezza dell'array\r\n\t\tif (oldFormData.length !== newFormData.length) {\r\n\t\t\treturn true;\r\n\t\t} else {\r\n\t\t\t// La lunghezza è uguale, confronto oggetto per oggetto\r\n\t\t\tfor (let i = 0; i < newFormData.length; i++) {\r\n\t\t\t\t// Confronto il numero di campi nell'oggetto\r\n\t\t\t\tif (oldFormData[i].length !== newFormData[i].length) {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// Il numeri di campi è uguale, confronto campo per campo\r\n\t\t\t\t\tfor (let key in newFormData[i]) {\r\n\t\t\t\t\t\t// Verifico se formData ha un nuovo campo!\r\n\t\t\t\t\t\tif (!oldFormData[i][key]) {\r\n\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t// Verifico se i campi sono uguali.\r\n\t\t\t\t\t\tif (oldFormData[i][key] !== newFormData[i][key]) {\r\n\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn false;\r\n};\r\n\r\n// Semplice funzione di hashing che ricava un hash univoco a 32 bit a partire\r\n//  da un oggetto qualsiasi.\r\n// Utile da importare nell'oggetto padre al fine di creare una chiave per il\r\n//  form che dipende univocamente da formData. Se il formData cambia, la\r\n//  chiave cambia ed il form viene completamente resettato.\r\n\r\nexport const stringifyAndHash = obj => {\r\n\t// Convert obj to string\r\n\tconst str = JSON.stringify(obj);\r\n\r\n\t// Convert str to 32bit hash\r\n\tlet hash = 0;\r\n\tif (str.length === 0) return hash;\r\n\tfor (let i = 0; i < str.length; i++) {\r\n\t\tconst char = str.charCodeAt(i);\r\n\t\thash = (hash << 5) - hash + char;\r\n\t\thash = hash & hash; // Convert to 32bit integer\r\n\t}\r\n\treturn hash;\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { createInitialState, calculateFieldsArrays } from './form.utils';\r\nimport Input from '../input/input.component';\r\nimport FormButton from '../../components/form-button/form-button.component';\r\n\r\nimport './form.style.scss';\r\n\r\nclass Form extends React.PureComponent {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\r\n\t\t// Divido gli elementi contenuti in formData in base al loro tipo\r\n\t\t// fields -> elmenti di input supportati\r\n\t\t// btns -> pulsanti (submit, reset, button)\r\n\t\t// unsupported -> elmenti di input non supportati o sconosciuti\r\n\r\n\t\t[this.fields, this.btns, this.unsupported] = calculateFieldsArrays(\r\n\t\t\tprops.formData\r\n\t\t);\r\n\r\n\t\t// Costruisco lo stato in base ai fields contenuti in formdata\r\n\t\t// Ogni campo dello stato coneterrà il valore contenuto nel field.\r\n\r\n\t\t// Lo stato dipende completamente dal prop formData.\r\n\t\t// E' stato scelto di rendere il componente completametne incontrollato\r\n\t\t//  , dunque lo stato viene fissato solo nel costruttore.\r\n\r\n\t\t// Se si desidera che il form vari dinamicamente al variare di formData\r\n\t\t//  , il componente padre deve associare una chiave al componente Form\r\n\t\t//  che dipende univocamente da formData. In questo modo, al variare di\r\n\t\t//  formData, l'intero componente viene automaticamente resettato.\r\n\r\n\t\t// In form.utilis è presente una funzione di hashing che permette di\r\n\t\t//  ottenere una chiave intera a 32bit a partire dall'oggetto formData:\r\n\t\t//  e.g: let formKey = stringifyAndHash(formData)\r\n\r\n\t\tthis.state = createInitialState(this.fields);\r\n\r\n\t\t// Dizionario che contiene i refs a tutti i campi del form.\r\n\t\t// Permette di interagire imperativamente con gli elmenti nel DOM.\r\n\t\t// Indispensabile per i campi di tipo file e per alcune validazioni.\r\n\r\n\t\tthis.fieldsRefs = {};\r\n\t\tfor (let i = 0; i < this.fields.length; i++) {\r\n\t\t\tthis.fieldsRefs[this.fields[i].name] = {\r\n\t\t\t\ttype: this.fields[i].type,\r\n\t\t\t\tref: React.createRef(),\r\n\t\t\t};\r\n\t\t}\r\n\t}\r\n\r\n\t//\r\n\t// Aggiorna lo stato in base ai valori inseriti nei campi del form\r\n\t//\r\n\r\n\thandleChange = event => {\r\n\t\tconst { name, type, value, checked, files } = event.target;\r\n\r\n\t\t// Vario lo stato in base in base al tipo di campo che è variato\r\n\t\t// Il tipo file contiene il/i file nel campo files e non value\r\n\t\t// Per tutti gli altri va bene il campo value\r\n\t\tif (type === 'file') {\r\n\t\t\tconst filesCopy = [...files];\r\n\t\t\tthis.setState({ [name]: files.length > 0 ? filesCopy : '' });\r\n\t\t} else if (type === 'checkbox') {\r\n\t\t\tthis.setState({ [name]: checked });\r\n\t\t} else {\r\n\t\t\tthis.setState({ [name]: value });\r\n\t\t}\r\n\t};\r\n\r\n\t//\r\n\t// Resetta lo stato alla pressione del pulsante reset, se presente\r\n\t//\r\n\r\n\thandleReset = event => {\r\n\t\tevent.preventDefault();\r\n\t\tthis.setState(createInitialState(this.fields));\r\n\r\n\t\t// Resetto manualmente i campi file utilizzando i loro refs.\r\n\t\t// Essendo campi non controllati, la variazione dello stato non\r\n\t\t//  influisce sul loro contenuto.\r\n\t\tfor (let key in this.fieldsRefs) {\r\n\t\t\tif (this.fieldsRefs[key].type === 'file') {\r\n\t\t\t\tthis.fieldsRefs[key].ref.current.value = '';\r\n\t\t\t\tthis.fieldsRefs[key].ref.current.files = null;\r\n\r\n\t\t\t\t// Triggero manualmente l'evento change dell'elemento: in\r\n\t\t\t\t//  questo modo viene eseguita la funzione handleChange che\r\n\t\t\t\t//  resetta la scritta riportata sull'elemento file custom.\r\n\t\t\t\tlet changeEvent = new Event('change', { bubbles: true });\r\n\t\t\t\tthis.fieldsRefs[key].ref.current.dispatchEvent(changeEvent);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t//\r\n\t// Passa la gestione del submit al componente padre\r\n\t//\r\n\r\n\thandleSubmit = event => {\r\n\t\tevent.preventDefault();\r\n\r\n\t\t// Estraggo dallo stato un oggetto contenente solo i campi compilati\r\n\t\t//  dall'utente. Faccio una copia dei campi che non sono primitive.\r\n\t\tconst filledFields = {};\r\n\t\tfor (let field in this.state) {\r\n\t\t\tif (this.state[field]) {\r\n\t\t\t\tif (Array.isArray(this.state[field])) {\r\n\t\t\t\t\tfilledFields[field] = [...this.state[field]];\r\n\t\t\t\t} else if (typeof this.state[field] === 'object') {\r\n\t\t\t\t\tfilledFields[field] = { ...this.state[field] };\r\n\t\t\t\t} else filledFields[field] = this.state[field];\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Invio i campi alla funzione onChange del padre\r\n\t\tthis.props.onSubmit(filledFields);\r\n\r\n\t\t// Resetto il form\r\n\t\tevent.target.reset();\r\n\t};\r\n\r\n\t//\r\n\t// RENDER DEL COMPONENTE\r\n\t//\r\n\r\n\trender() {\r\n\t\tthis.unsupported.length !== 0 &&\r\n\t\t\tconsole.warn(\r\n\t\t\t\t'Incompatible types were discarded by the form: ',\r\n\t\t\t\tthis.unsupported\r\n\t\t\t);\r\n\r\n\t\treturn (\r\n\t\t\t<form\r\n\t\t\t\tclassName='form'\r\n\t\t\t\tonSubmit={this.handleSubmit}\r\n\t\t\t\tonReset={this.handleReset}>\r\n\t\t\t\t<h1>{this.props.title}</h1>\r\n\r\n\t\t\t\t{this.fields.map(({ equalTo, ...field }) => (\r\n\t\t\t\t\t<Input\r\n\t\t\t\t\t\tkey={field.id}\r\n\t\t\t\t\t\tfieldValue={field.type !== 'file' ? this.state[field.name] : null}\r\n\t\t\t\t\t\tinnerRef={this.fieldsRefs[field.name].ref}\r\n\t\t\t\t\t\tequalTo={equalTo ? this.state[equalTo] : null}\r\n\t\t\t\t\t\tonChange={this.handleChange}\r\n\t\t\t\t\t\t{...field}\r\n\t\t\t\t\t/>\r\n\t\t\t\t))}\r\n\r\n\t\t\t\t<div className='btns-container'>\r\n\t\t\t\t\t{this.btns.map(btn => (\r\n\t\t\t\t\t\t<FormButton key={btn.id} {...btn} />\r\n\t\t\t\t\t))}\r\n\t\t\t\t</div>\r\n\t\t\t</form>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nForm.propTypes = {\r\n\t// Il titolo del form\r\n\ttitle: PropTypes.string,\r\n\r\n\t// Array che descrive il contenuto del form.\r\n\t// Ogni elemento di formData contiene le informazioni necessarie a creare\r\n\t//  un campo del form: queste informazioni comprendono attributi html e\r\n\t//  attributi custom.\r\n\t// I tipi supportati sono elencati nel file ./form.types.js\r\n\r\n\tformData: PropTypes.arrayOf(\r\n\t\tPropTypes.shape({\r\n\t\t\ttype: PropTypes.string.isRequired,\r\n\t\t\tname: PropTypes.string.isRequired,\r\n\t\t\tid: PropTypes.string.isRequired,\r\n\t\t})\r\n\t).isRequired,\r\n\r\n\t// Funzione per la gestione del submit da parte del componente padre.\r\n\t// Il componente Form chiamerà questa funzione inserendo in input i valori\r\n\t//  di tutti i campi non vuoti del form.\r\n\r\n\tonSubmit: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Form;\r\n","const FORM_DATA = [\r\n\t// FULL NAME\r\n\t{\r\n\t\ttype: 'text',\r\n\t\tname: 'fullName',\r\n\t\tid: 'fn-1',\r\n\t\tplaceholder: 'Insert your full name',\r\n\t\tlabel: 'Full Name',\r\n\t\tpattern: '[a-zA-Z ]{0,}',\r\n\t\terrMsg: 'Only letters allowed',\r\n\t},\r\n\r\n\t// GENDER RADIO SELECTORS\r\n\t{\r\n\t\ttype: 'radios',\r\n\t\tname: 'gender',\r\n\t\t// Questo è l'id del fragment principale\r\n\t\tid: 'gender-radios',\r\n\t\t// Questo è il label principale, che descrive tutte le opzioni\r\n\t\tlabel: 'Select your gender',\r\n\t\t// Ogni opzione avrà un suo id generato come name-option\r\n\t\t// Ogni opzione avrà un proprio label, generato a paritire dal nome\r\n\t\toptions: ['male', 'female', 'other'],\r\n\t},\r\n\r\n\t// BIRTHDATE\r\n\t{\r\n\t\ttype: 'date',\r\n\t\tname: 'birthdate',\r\n\t\tid: 'birth-1',\r\n\t\tlabel: 'Insert your birth date',\r\n\t\tmin: '1920-01-01',\r\n\t\tmax: '2021-05-05',\r\n\t\terrMsg:\r\n\t\t\t'Dates previous to 1920 are not allowed\\nDates next to today are not allowed',\r\n\t},\r\n\r\n\t// COUNTRY SELECTOR\r\n\t// Genera un tag <select> con all'interno i tag <option>\r\n\t//  specificati nel campo 'options'\r\n\t{\r\n\t\ttype: 'select',\r\n\t\tname: 'country',\r\n\t\t// id e label si riferiscono al tag <select>\r\n\t\tid: 'country-1',\r\n\t\tlabel: 'Select your country',\r\n\t\t// Ogni <option> avrà una key univoca e un campo value pari alla\r\n\t\t//  stringa inserita qui sotto.\r\n\t\toptions: ['Italy', 'USA', 'UK', 'France', 'Spain', 'Germany'],\r\n\t},\r\n\r\n\t// PHONE NUMBER - Si potrebbe migliorare\r\n\t{\r\n\t\ttype: 'tel',\r\n\t\tname: 'tel',\r\n\t\tid: 'tel-1',\r\n\t\tplaceholder: '+39',\r\n\t\tlabel: 'Phone Number',\r\n\t\tmask: '+39 ### ### ####',\r\n\t\tpattern: '^\\\\+39 ([0-9]{3}) ([0-9]{3}) ([0-9]{4})$',\r\n\t\terrMsg: 'Insert a valid phone number\\nEg: +39 333 444 5555',\r\n\t},\r\n\r\n\t// USERNAME\r\n\t{\r\n\t\ttype: 'text',\r\n\t\tname: 'user',\r\n\t\tid: 'user-1',\r\n\t\tplaceholder: 'Insert your user name',\r\n\t\tlabel: 'User Name',\r\n\t\trequired: true,\r\n\t\tmaxLength: '10',\r\n\t\tpattern: \"[^$&+,:;.=?@#|'<>^*()%! ]{0,}\",\r\n\t\terrMsg: 'Max 10 chars\\nNo spaces, no special chars.',\r\n\t},\r\n\r\n\t// EMAIL\r\n\t{\r\n\t\ttype: 'email',\r\n\t\tname: 'email',\r\n\t\tid: 'email-1',\r\n\t\tplaceholder: 'Insert your email',\r\n\t\tlabel: 'Email',\r\n\t\trequired: true,\r\n\t\tpattern: '^([a-z0-9-]+\\\\.?)+[a-z0-9-]+@([a-z-]+\\\\.)+[a-z-]{2,4}$',\r\n\t\terrMsg: 'Insert a correct email address\\nEg: my.address@domain.com',\r\n\t},\r\n\r\n\t// PASSWORD\r\n\t{\r\n\t\ttype: 'password',\r\n\t\tname: 'password',\r\n\t\tid: 'pass-1',\r\n\t\tplaceholder: 'Insert your password',\r\n\t\tlabel: 'Password',\r\n\t\trequired: true,\r\n\t\tpattern: '(?=.*[a-z])(?=.*[A-Z])(?=.*\\\\d).{6,15}',\r\n\t\terrMsg: `From 6 to 15 character.\r\n    \tAt least one lower case char.\r\n    \tAt least one upper case char.\r\n    \tAt least one number.`,\r\n\t},\r\n\r\n\t// CONFIRM PASSWORD - La validazione è fatta in React\r\n\t{\r\n\t\ttype: 'password',\r\n\t\tname: 'confirmPassword',\r\n\t\tid: 'conf-pass-1',\r\n\t\tplaceholder: 'Confirm your password',\r\n\t\tlabel: 'Confirm Password',\r\n\t\trequired: true,\r\n\t\tequalTo: 'password',\r\n\t\terrMsg: 'The two password fields must be identical!',\r\n\t},\r\n\r\n\t// FILE - CURRICULUM VITAE\r\n\t{\r\n\t\ttype: 'file',\r\n\t\tname: 'curriculum',\r\n\t\tid: 'curriculum',\r\n\t\tlabel: 'Curriculum Vitae',\r\n\t\taccept:\r\n\t\t\t'application/pdf, application/msword, application/vnd.openxmlformats-officedocument.wordprocessingml.document, application/vnd.oasis.opendocument.text',\r\n\t\terrMsg: 'The file format is invalid',\r\n\t},\r\n\r\n\t// TEXTAREA - ADDITIONAL INFO\r\n\t// Genera un tag <textarea />\r\n\t{\r\n\t\ttype: 'textarea',\r\n\t\tname: 'additionalInfo',\r\n\t\tid: 'add-info',\r\n\t\tplaceholder: 'Write some additional info',\r\n\t\trows: '5',\r\n\t\tlabel: 'Additional Info',\r\n\t\tinfo: 'Inserisci tutte le informazioni aggiuntive che sono state richieste nel bando.',\r\n\t},\r\n\r\n\t// PRIVACY -> CHECKBOXES\r\n\t{\r\n\t\ttype: 'checkboxes',\r\n\t\tname: 'privacy',\r\n\t\tid: 'privacy-1',\r\n\t\toptions: [\r\n\t\t\t{\r\n\t\t\t\tlabel:\r\n\t\t\t\t\t'Acconsenti al trattamento dei dati necessari per il funzionamento?',\r\n\t\t\t\trequired: true,\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tlabel: 'Acconsenti al trattamento dei dati per fini commerciali?',\r\n\t\t\t\trequired: false,\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tlabel: 'Acconsenti al trattamento dei dati da parte di terzi?',\r\n\t\t\t\trequired: false,\r\n\t\t\t},\r\n\t\t],\r\n\t\tlabel: 'Acconsenti al trattamento dei dati?',\r\n\t\tinfo: \"Leggi l'informativa sulla privacy al seguente link: _link_\",\r\n\t},\r\n\r\n\t// SUBMIT E RESET\r\n\t{\r\n\t\ttype: 'submit',\r\n\t\tname: 'submit-button',\r\n\t\tid: 'submit-1',\r\n\t\t// Il campo value descrive la scritta sul pulsante\r\n\t\tvalue: 'SUBMIT',\r\n\t},\r\n\t{\r\n\t\ttype: 'reset',\r\n\t\tname: 'reset-button',\r\n\t\tid: 'reset-1',\r\n\t\tvalue: 'RESET',\r\n\t},\r\n\t{\r\n\t\ttype: 'button',\r\n\t\tname: 'custom-button',\r\n\t\tid: 'custom-1',\r\n\t\tvalue: 'LOG',\r\n\t\tonClick: () => console.log('I AM A CUSTOM BUTTON'),\r\n\t},\r\n];\r\n\r\nexport default FORM_DATA;\r\n","import React, { useCallback, useState } from 'react';\r\n\r\nimport './App.scss';\r\n\r\nimport FormBuilder from '../form-builder/form-builder/form-builder.component';\r\nimport Form from '../form-custom/form/form.component';\r\nimport { stringifyAndHash } from '../form-custom/form/form.utils';\r\n\r\nimport FORM_DATA from './form.data';\r\nconst FORM_KEY = stringifyAndHash(FORM_DATA);\r\n\r\n// Questa è una semplice demo per mostrare le potenzialità del componente Form.\r\n\r\n// Form genera un form a partire da un array di oggetti js; ogni oggetto\r\n//  contiene gli attributi che descrivono un campo del form. I campi supportati\r\n//  sono elencati in form.types.js\r\n// Form genera il proprio stato interno a partire dall'array js che gli viene\r\n//  passato come prop ed è un componente completamente incontrollato, in quanto\r\n//  presuppone che tale array sia una costante.\r\n// Per tutti quei casi in cui l'array varia dinamicamente, è necessario passare\r\n//  a Form una chiave univoca generata a partire dall'array. Per farlo, in\r\n//  form.utils.js è presente la funzione stringifyAndHash.\r\n\r\n// La demo si divide in tre sezioni.\r\n\r\n// La prima è il default-form, un semplice form generato a partire dal file\r\n//  form.data.js, che cerca di mostrare la varietà di campi generabili dal\r\n//  componente Form.\r\n\r\n// La seconda è il componente FormBuilder, che permette all'utente di creare\r\n//  graficamente un form. FormBuilder genera infatti un array js compatibile\r\n//  con il componente Form.\r\n\r\n// La terza sezione appare solo dopo aver sottoscritto il formBuilder e contiene\r\n//  il form generato graficamente dall'utente.\r\n\r\nconst App = () => {\r\n\t// Per semplicità, al posto di creare tre diverse pagine, utilizzando il\r\n\t//  routing, utilizzo lo stato tabsState per mostrare/nascondere\r\n\t//  dinamicamente le tre sezioni di cui è composta questa app.\r\n\tconst [tabsState, setTabs] = useState({\r\n\t\tdefault: false, // Il form di esempio generato da FORM_DATA\r\n\t\tbuilder: false, // Il form builder\r\n\t\tcustom: false, // Il form generato dopo il submit del form builder\r\n\t});\r\n\r\n\t// Deve essere mostrata a schermo solo una tab alla volta\r\n\tconst toggleTab = tabName => {\r\n\t\tconst newTabsState = { default: false, custom: false, builder: false };\r\n\t\tnewTabsState[tabName] = !tabsState[tabName];\r\n\t\tsetTabs(newTabsState);\r\n\t};\r\n\r\n\t// Questo stato raccoglie i dati forniti dal submit del formbuilder e\r\n\t//  serve a generare il custom form. In sostanza, contiene quelli che per\r\n\t//  il form di esempio sono title, FORM_DATA e FORM_KEY\r\n\tconst [customForm, setCustomForm] = useState({\r\n\t\ttitle: '',\r\n\t\tformData: null,\r\n\t\tkey: null,\r\n\t});\r\n\r\n\t// Ricevo i dati contenuti nei campi del FormBuilder e li carico nello\r\n\t//  stato customForm, in modo da generare il form descritto dall'utente\r\n\tconst handleFBSubmit = useCallback((title, formData) => {\r\n\t\t// Creo la chiave univoca\r\n\t\tconst key = stringifyAndHash(formData);\r\n\t\t// Setto lo stato con i dati aggiornati del custom form\r\n\t\tsetCustomForm({\r\n\t\t\ttitle,\r\n\t\t\tformData,\r\n\t\t\tkey,\r\n\t\t});\r\n\t}, []);\r\n\r\n\t// Funzione a scopo dimostrativo che viene evocata quando il default form\r\n\t//  o il custom form vengono sottoscritti.\r\n\tconst handleFormSubmit = useCallback(fields => {\r\n\t\tconsole.log('FORM SUBMITTED');\r\n\t\tconsole.log(fields);\r\n\t}, []);\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<div className='tabs-container'>\r\n\t\t\t\t<button onClick={() => toggleTab('builder')}>\r\n\t\t\t\t\t{(tabsState.builder ? 'HIDE' : 'SHOW') + ' FORM BUILDER'}\r\n\t\t\t\t</button>\r\n\t\t\t\t{customForm.formData && (\r\n\t\t\t\t\t<button onClick={() => toggleTab('custom')}>\r\n\t\t\t\t\t\t{(tabsState.custom ? 'HIDE' : 'SHOW') + ' BUILDED FORM'}\r\n\t\t\t\t\t</button>\r\n\t\t\t\t)}\r\n\t\t\t\t<button onClick={() => toggleTab('default')}>\r\n\t\t\t\t\t{(tabsState.default ? 'HIDE' : 'SHOW') + ' DEMO FORM'}\r\n\t\t\t\t</button>\r\n\t\t\t</div>\r\n\r\n\t\t\t{tabsState.builder && <FormBuilder onSubmit={handleFBSubmit} />}\r\n\r\n\t\t\t{tabsState.custom && (\r\n\t\t\t\t<Form\r\n\t\t\t\t\tkey={customForm.key}\r\n\t\t\t\t\ttitle={customForm.title}\r\n\t\t\t\t\tformData={customForm.formData}\r\n\t\t\t\t\tonSubmit={handleFormSubmit}\r\n\t\t\t\t/>\r\n\t\t\t)}\r\n\r\n\t\t\t{tabsState.default && (\r\n\t\t\t\t<Form\r\n\t\t\t\t\tkey={FORM_KEY}\r\n\t\t\t\t\ttitle='DEMO FORM'\r\n\t\t\t\t\tformData={FORM_DATA}\r\n\t\t\t\t\tonSubmit={handleFormSubmit}\r\n\t\t\t\t/>\r\n\t\t\t)}\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './example/App';\n\nimport './index.css';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n"],"sourceRoot":""}